<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NIO应用</title>
      <link href="/2019/10/17/nio-ying-yong/"/>
      <url>/2019/10/17/nio-ying-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、NIO-的核心概念"><a href="#一、NIO-的核心概念" class="headerlink" title="一、NIO 的核心概念"></a>一、NIO 的核心概念</h3><p>NIO核心API Channel, Buffer, Selector 。 其它组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。 </p><h4 id="1-Buffer的概念"><a href="#1-Buffer的概念" class="headerlink" title="1,Buffer的概念"></a>1,Buffer的概念</h4><pre><code>缓冲区本质上是一个可以写入数据的内存块，然后可以再次读取，该对象提供了一组方法，可以更轻松地使用内存块，使用缓冲区读取和写入数据通常遵循以下四个步骤：1. 写数据到缓冲区；2. 调用buffer.flip()方法；3. 从缓冲区中读取数据；4. 调用buffer.clear()或buffer.compat()方法；</code></pre><p>当向buffer写入数据时，buffer会记录下写了多少数据，一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式，在读模式下可以读取之前写入到buffer的所有数据，一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。</p><pre class="line-numbers language-java"><code class="language-java">capacity <span class="token operator">:</span> buffer的大小<span class="token operator">/</span>容量，作为一个内存块，Buffer有一个固定的大小值，用参数capacity表示。position <span class="token operator">:</span> 当你写数据到Buffer中时，position表示当前的位置。初始的position值为<span class="token number">0</span><span class="token punctuation">.</span>当一个<span class="token keyword">byte</span>、<span class="token keyword">long</span>等数据写到Buffer后， position会向前移动到下一个可插入数据的Buffer单元。position最大可为capacity – <span class="token number">1</span><span class="token punctuation">.</span>    当读取数据时，也是从某个特定位置读。当将Buffer从写模式切换到读模式，position会被重置为<span class="token number">0</span><span class="token punctuation">.</span> 当从Buffer的position处读取数据时，position向前移动到下一个可读的位置。limit <span class="token operator">:</span> 在写模式下，Buffer的limit表示你最多能往Buffer里写多少数据。 写模式下，limit等于Buffer的capacity。    当切换Buffer到读模式时， limit表示你最多能读到多少数据。因此，当切换Buffer到读模式时，limit会被设置成写模式下的position值。换句话说，你能读到之前写入的所有数据（limit被设置成已写数据的数量，这个值在写模式下就是position）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luban<span class="token punctuation">.</span>nio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>IntBuffer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IntBuffer buffer <span class="token operator">=</span> IntBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buffer数据："</span><span class="token operator">+</span>i <span class="token operator">+</span> <span class="token string">"\t capacity:"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t position:"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t limit : "</span><span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buffer数据："</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t capacity:"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t position:"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t limit : "</span><span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">buffer数据：<span class="token number">0</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">1</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">1</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">2</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">2</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">3</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">3</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">4</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">4</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">5</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">5</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">6</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">6</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">7</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">7</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">8</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">0</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">1</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">1</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">2</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">2</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">3</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">3</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">4</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">4</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">5</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">5</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">6</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">6</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">7</span>     limit <span class="token operator">:</span> <span class="token number">8</span>buffer数据：<span class="token number">7</span>     capacity<span class="token operator">:</span><span class="token number">8</span>     position<span class="token operator">:</span><span class="token number">8</span>     limit <span class="token operator">:</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2，Buffer的类型"><a href="#2，Buffer的类型" class="headerlink" title="2，Buffer的类型"></a>2，Buffer的类型</h4><p>Java NIO 有以下Buffer 类型</p><ul><li>ByteBuffer</li><li>MappedByteBuffer</li><li>CharBuffer</li><li>IntBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>ShortBuffer</li><li>LongBuffer</li></ul><h3 id="二、Channel"><a href="#二、Channel" class="headerlink" title="二、Channel"></a>二、Channel</h3><pre><code>Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。通道可以异步地读写。通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。</code></pre><pre class="line-numbers language-flow"><code class="language-flow">ch=>start: Channelop=>operation: Bufferop(right)->ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow"><code class="language-flow">ch=>start: Channelop=>operation: Bufferch(right)->op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1，Channel-的实现"><a href="#1，Channel-的实现" class="headerlink" title="1，Channel 的实现"></a>1，Channel 的实现</h4><ul><li><p>FileChannel</p></li><li><p>DatagramChannel</p></li><li><p>SocketChannel</p></li><li><p>ServerSocketChannel</p><p><code>FileChannel</code> : 从文件中读取数据。</p><p><code>DatagramChannel</code>： 能通过UDP读写网络中的数据。</p><p><code>SocketChannel</code>:  一般用于客户端，能通过TCP 读取网络中的数据。</p><p><code>ServerSocketChannel</code>: 一般用于服务端， 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel 。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luban<span class="token punctuation">.</span>nio<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileOutputStream fileOutputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"dome4write.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"dome4read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel channelRead <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel channelWrite <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer byteBuffer<span class="token operator">=</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> readNumber <span class="token operator">=</span> channelRead<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>readNumber<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           channelWrite<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-SocketChannel"><a href="#2-SocketChannel" class="headerlink" title="2 , SocketChannel"></a>2 , SocketChannel</h4><ul><li><p>打开 SocketChannel</p><pre class="line-numbers language-java"><code class="language-java">SocketChannel socketChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"blog.huadongxu.club"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭 SocketChannel :  当用完SocketChannel之后调用SocketChannel.close()关闭 SocketChannel </p><pre class="line-numbers language-java"><code class="language-java">socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从 SocketChannel 读取数据 : </p><pre class="line-numbers language-java"><code class="language-java">ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> byteRead <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>read()方法返回的int值表示读了多少字节进Buffer里。如果返回的是-1，表示已经读到了流的末尾（连接关闭了） </p></li><li><p>写入 SocketChannel</p><pre class="line-numbers language-java"><code class="language-java">String newData <span class="token operator">=</span> <span class="token string">"New String to write to file..."</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-ServerSocketChannel"><a href="#3-ServerSocketChannel" class="headerlink" title="3,  ServerSocketChannel"></a>3,  ServerSocketChannel</h4><pre><code>     Java NIO中的 ServerSocketChannel 是一个可以监听新进来的TCP连接的通道</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打开一个通道</span>        serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通道设置非阻塞</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定端口号</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>打开 ServerSocketChannel</p><pre class="line-numbers language-java"><code class="language-java">ServerScoketChannel serverScoketChannel <span class="token operator">=</span> ServerScoketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听新进来的连接 :  通过 ServerSocketChannel.accept() 方法监听新进来的连接。当 accept()方法返回的时候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞到有新连接到达。 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SocketChannel socketChannel <span class="token operator">=</span> serverScoketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>非阻塞模式 :  ServerSocketChannel可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。 因此，需要检查返回的SocketChannel是否是null.如 </p><pre class="line-numbers language-java"><code class="language-java">ServerScoketChannel serverScoketChannel <span class="token operator">=</span> ServerScoketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverScoketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverScoketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SocketChannel socketChannel <span class="token operator">=</span> serverScoketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>socketChannel <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、Selector-选择器"><a href="#三、Selector-选择器" class="headerlink" title="三、Selector (选择器)"></a>三、Selector (选择器)</h3><p>​    Selector(选择器) 是Java NIO 中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel,从而管理多个网络连接。</p><h4 id="1-Selector-的创建"><a href="#1-Selector-的创建" class="headerlink" title="1, Selector 的创建"></a>1, Selector 的创建</h4><pre class="line-numbers language-java"><code class="language-java">Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-向Selector-注册通道"><a href="#2-向Selector-注册通道" class="headerlink" title="2,  向Selector 注册通道"></a>2,  向Selector 注册通道</h4><pre><code> 为了将Channel和Selector配合使用，必须将channel注册到selector上。通过SelectableChannel.register()方法来实现，如下： </code></pre><pre class="line-numbers language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SelectionKey key <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>Selectionkey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意register() 方法的第二个参数。可以监听四种不同类型的事件：</p><ul><li>Connect</li><li>Accept</li><li>Read</li><li>Write</li></ul><p>​        通道触发了一个事件意思是该事件已经就绪。所以，某个channel成功连接到另一个服务器称为“连接就绪”。一个server socket channel准备好接收新进入的连接称为“接收就绪”。一个有数据可读的通道可以说是“读就绪”。等待写数据的通道可以说是“写就绪”。 </p><h4 id="3-SelectionKey"><a href="#3-SelectionKey" class="headerlink" title="3 , SelectionKey"></a>3 , SelectionKey</h4><p>​         当向Selector注册Channel时，register()方法会返回一个SelectionKey对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> interestSet <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isInterestedInAccept  <span class="token operator">=</span> <span class="token punctuation">(</span>interestSet <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span> <span class="token operator">==</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT；<span class="token keyword">boolean</span> isInterestedInConnect <span class="token operator">=</span> interestSet <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">;</span><span class="token keyword">boolean</span> isInterestedInRead    <span class="token operator">=</span> interestSet <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">;</span><span class="token keyword">boolean</span> isInterestedInWrite   <span class="token operator">=</span> interestSet <span class="token operator">&amp;</span> SelectionKey<span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">;</span>Channel  channel  <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Selector selector <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>huaxu<span class="token punctuation">.</span>chatCopy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>ServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   @author Dongxu Hua *   @date 2019/10/17 14:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOServer</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 选择器     */</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通道     */</span>    ServerSocketChannel serverSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打开一个通道</span>        serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通道设置非阻塞</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定端口号</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server started succeed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> ite <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>ite<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                SelectionKey key <span class="token operator">=</span> ite<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    SocketChannel channel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">recvAndReply</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ite<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recvAndReply</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NIO server received message =  "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NIO server reply =  "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        NIOServer server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NIOServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">initServer</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>huaxu<span class="token punctuation">.</span>chatCopy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *   @author Dongxu Hua *   @date 2019/10/17 14:48 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通道     */</span>    SocketChannel channel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initClient</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造socket连接</span>        InetSocketAddress servAddr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打开连接</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>servAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAndRecv</span><span class="token punctuation">(</span>String words<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client sending: "</span> <span class="token operator">+</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client received: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        NIOClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NIOClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">initClient</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入要发送给服务端的内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">sendAndRecv</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p>client端执行结果：</p><pre class="line-numbers language-java"><code class="language-java">请输入要发送给服务端的内容：hello ， 我叫华翔Client sending<span class="token operator">:</span> hello ， 我叫华翔Client received<span class="token operator">:</span> hello ， 我叫华翔请输入要发送给服务端的内容：不主动<span class="token operator">/</span>不拒绝<span class="token operator">/</span>不负责Client sending<span class="token operator">:</span> 不主动<span class="token operator">/</span>不拒绝<span class="token operator">/</span>不负责Client received<span class="token operator">:</span> 不主动<span class="token operator">/</span>不拒绝<span class="token operator">/</span>不负责请输入要发送给服务端的内容：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server 端执行结果：</p><pre class="line-numbers language-java"><code class="language-java">server started succeed<span class="token operator">!</span>NIO server received message <span class="token operator">=</span>  hello ， 我叫华翔NIO server reply <span class="token operator">=</span>  hello ， 我叫华翔NIO server received message <span class="token operator">=</span>  不主动<span class="token operator">/</span>不拒绝<span class="token operator">/</span>不负责NIO server reply <span class="token operator">=</span>  不主动<span class="token operator">/</span>不拒绝<span class="token operator">/</span>不负责<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最近学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plan</title>
      <link href="/2019/10/09/plan/"/>
      <url>/2019/10/09/plan/</url>
      
        <content type="html"><![CDATA[<p>NIO -&gt; Netty -&gt; Spring -&gt; JUC</p>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最近学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringApplication</title>
      <link href="/2019/09/28/springapplication/"/>
      <url>/2019/09/28/springapplication/</url>
      
        <content type="html"><![CDATA[<h1 id="第一节-SpringApplication"><a href="#第一节-SpringApplication" class="headerlink" title="第一节 SpringApplication"></a><a href="lesson-1">第一节 SpringApplication</a></h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h3 id="自定义-SpringApplication"><a href="#自定义-SpringApplication" class="headerlink" title="自定义 SpringApplication"></a>自定义 SpringApplication</h3><h4 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><code>SpringApplication</code></h4><p><code>SpringApplication</code> Spring Boot 驱动 Spring 应用上下文的引导类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ComponentScan</code>: 它是版本引入的？ Spring Framework 3.1</p><p><code>@EnableAutoConfiguration</code>: 激活自动装配 <code>@Enable</code> -&gt; <code>@Enable</code> 开头的</p><ul><li><code>@EnableWebMvc</code></li><li><code>@EnableTransactionManagement</code></li><li><code>@EnableAspectJAutoProxy</code></li><li><code>@EnableAsync</code></li></ul><p><code>@SpringBootConfiguration</code> : 等价于 <code>@Configuration</code> -&gt; Configuration Class 注解</p><h4 id="Component-的“派生性”"><a href="#Component-的“派生性”" class="headerlink" title="@Component 的“派生性”"></a><code>@Component</code> 的“派生性”</h4><p><code>@Component</code> -&gt; <code>@ComponentScan</code></p><p>处理类 -&gt; <code>ConfigurationClassParser</code></p><p>扫描类 -&gt; </p><ul><li><p><code>ClassPathBeanDefinitionScanner</code></p><ul><li><p><code>ClassPathScanningCandidateComponentProvider</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Dubbo <code>@Service</code> -&gt; 2.5.7 -&gt; <code>new AnnotationTypeFilter(Service.class);</code></p></li></ul></li></ul><h4 id="Spring-注解编程模型"><a href="#Spring-注解编程模型" class="headerlink" title="Spring 注解编程模型"></a><a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model" target="_blank" rel="noopener">Spring 注解编程模型</a></h4><ul><li><p><code>@Component</code></p><ul><li><p><code>@Service</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@Repository</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Repository</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@Controller</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@Configuration</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="Spring-模式注解：Stereotype-Annotations"><a href="#Spring-模式注解：Stereotype-Annotations" class="headerlink" title="Spring 模式注解：Stereotype Annotations"></a>Spring 模式注解：Stereotype Annotations</h4><h5 id="Spring-注解驱动示例"><a href="#Spring-注解驱动示例" class="headerlink" title="Spring 注解驱动示例"></a>Spring 注解驱动示例</h5><p>注解驱动上下文 <code>AnnotationConfigApplicationContext</code> ， Spring Framework 3.0 开始引入的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAnnotationDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//   XML 配置文件驱动       ClassPathXmlApplicationContext</span>        <span class="token comment" spellcheck="true">// Annotation 驱动</span>        <span class="token comment" spellcheck="true">// 找 BeanDefinition</span>        <span class="token comment" spellcheck="true">// @Bean @Configuration</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册一个 Configuration Class = SpringAnnotationDemo</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SpringAnnotationDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上下文启动</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>SpringAnnotationDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@SpringBootApplication</code> 标注当前一些功能</p><ul><li><code>@SpringBootApplication</code><ul><li><code>@SpringBootConfiguration</code><ul><li><code>@Configuration</code><ul><li><code>@Component</code></li></ul></li></ul></li></ul></li></ul><p><code>SpringApplication</code> Spring Boot 应用的引导</p><p>基本写法</p><pre class="line-numbers language-java"><code class="language-java">SpringApplication springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        springApplication<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SpringApplicationBuilder"><a href="#SpringApplicationBuilder" class="headerlink" title="SpringApplicationBuilder"></a><code>SpringApplicationBuilder</code></h4><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Fluent API</span>                <span class="token comment" spellcheck="true">// 单元测试是 PORT = RANDOM</span>                <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token string">"server.port=0"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 随机向 OS 要可用端口</span>                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-Boot-引导示例"><a href="#Spring-Boot-引导示例" class="headerlink" title="Spring Boot 引导示例"></a>Spring Boot 引导示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroservicesProjectApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        springApplication<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 有异常？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调整示例为-非-Web-程序"><a href="#调整示例为-非-Web-程序" class="headerlink" title="调整示例为 非 Web 程序"></a>调整示例为 非 Web 程序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MicroservicesProjectApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        springApplication<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置为 非 web 应用</span>        springApplication<span class="token punctuation">.</span><span class="token function">setWebApplicationType</span><span class="token punctuation">(</span>WebApplicationType<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 有异常？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MicroservicesProjectApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出当前 Spring Boot 应用的 ApplicationContext 的类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前 Spring 应用上下文的类："</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>当前 Spring 应用上下文的类：org.springframework.context.annotation.AnnotationConfigApplicationContext</code></pre><h3 id="配置-Spring-Boot-源"><a href="#配置-Spring-Boot-源" class="headerlink" title="配置 Spring Boot 源"></a>配置 Spring Boot 源</h3><h3 id="SpringAppliation-类型推断"><a href="#SpringAppliation-类型推断" class="headerlink" title="SpringAppliation 类型推断"></a>SpringAppliation 类型推断</h3><p>当不加以设置 Web 类型，那么它采用推断：</p><p>-&gt; <code>SpringAppliation()</code> -&gt; <code>deduceWebApplicationType()</code> 第一次推断为 <code>WebApplicationType.SERVLET</code></p><ul><li><code>WebApplicationType.NONE</code> : 非 Web 类型<ul><li><code>Servlet</code> 不存在</li><li>Spring Web 应用上下文 <code>ConfigurableWebApplicationContext</code>  不存在<ul><li><code>spring-boot-starter-web</code> 不存在</li><li><code>spring-boot-starter-webflux</code> 不存在</li></ul></li></ul></li><li><code>WebApplicationType.REACTIVE</code> : Spring WebFlux<ul><li><code>DispatcherHandler</code><ul><li><code>spring-boot-starter-webflux</code> 存在</li></ul></li><li><code>Servlet</code> 不存在<ul><li><code>spring-boot-starter-web</code> 不存在</li></ul></li></ul></li><li><code>WebApplicationType.SERVLET</code> : Spring MVC<ul><li><code>spring-boot-starter-web</code> 存在</li></ul></li></ul><h4 id="人工干预-Web-类型"><a href="#人工干预-Web-类型" class="headerlink" title="人工干预 Web 类型"></a>人工干预 Web 类型</h4><p>设置 webApplicationType 属性 为 <code>WebApplicationType.NONE</code></p><h3 id="Spring-Boot-事件"><a href="#Spring-Boot-事件" class="headerlink" title="Spring Boot 事件"></a>Spring Boot 事件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GenericApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加事件监听器</span>        <span class="token comment" spellcheck="true">/*context.addApplicationListener(new ApplicationListener&lt;ApplicationEvent>() {            @Override            public void onApplicationEvent(ApplicationEvent event) {                System.err.println("监听事件："+event);            }        });*/</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClosedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动Spring应用上下文</span>        context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// spring 应用上下文发布事件</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自定义的 ContextClosedEvent</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClosedListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextClosedEvent<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextClosedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭上下文："</span><span class="token operator">+</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//自定义的 ContextRefreshedEvent</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RefreshedEvent</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextRefreshedEvent<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动上下文："</span><span class="token operator">+</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>分别调用了启动上下文的事件 和 关闭上下文的事件</code></p><p>执行结果</p><p><code>启动上下文：org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.GenericApplicationContext@782830e, started on Thu Sep 19 22:13:02 AWST 2019]</code></p><p><code>关闭上下文：org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.support.GenericApplicationContext@782830e, started on Thu Sep 19 22:13:02 AWST 2019]</code></p><p>Spring 事件</p><p>Spring 内部发送事件</p><ul><li><code>ContextRefreshedEvent</code> <ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>refresh()</code> -&gt; <code>finishRefresh()</code> -&gt;  <code>publishEvent(new ContextRefreshedEvent(this));</code></p><ul><li><code>ContextClosedEvent</code><ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>close()</code> -&gt; <code>doClose()</code> -&gt; <code>publishEvent(new ContextClosedEvent(this));</code></p><p>自定义事件</p><p>SimpleApplicationEventMulticaster</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationEventMulticasterDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationEventMulticaster multicaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加监听器</span>        multicaster<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>event <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">PayloadApplicationEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到 PayloadApplicationEvent事件:"</span>                        <span class="token operator">+</span>PayloadApplicationEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到事件： "</span><span class="token operator">+</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发布/广播事件</span>        multicaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multicaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayloadApplicationEvent</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"hello World"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">MyEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-java"><code class="language-java">接收到事件： com<span class="token punctuation">.</span>huaxu<span class="token punctuation">.</span>springApplication<span class="token punctuation">.</span>ApplicationEventMulticasterDemo$MyEvent<span class="token punctuation">[</span>source<span class="token operator">=</span>Hello World<span class="token punctuation">]</span>接收到 PayloadApplicationEvent事件<span class="token operator">:</span>hello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Spring 事件 都是 <code>ApplicationEvent</code> 类型</p><p>发送 Spring 事件通过  <code>ApplicationEventMulticaster#multicastEvent(ApplicationEvent, ResolvableType)</code></p><p>Spring 事件的类型 <code>ApplicationEvent</code></p><p>Spring 事件监听器 <code>ApplicationListener</code></p><p>Spring 事件广播器 <code>ApplicationEventMulticaster</code></p><ul><li>实现类：<code>SimpleApplicationEventMulticaster</code></li></ul><p>Spring 事件理解为消息</p><p><code>ApplicationEvent</code> 相当于消息内容</p><p><code>ApplicationListener</code> 相当于消息消费者、订阅者</p><p><code>ApplicationEventMulticaster</code> 相当于消息生产者、发布者</p><h4 id="Spring-Boot-事件监听示例"><a href="#Spring-Boot-事件监听示例" class="headerlink" title="Spring Boot 事件监听示例"></a>Spring Boot 事件监听示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootEventDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span>SpringBootEventDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span>event <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 增加监听器</span>                    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监听到事件 ： "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#### </p><pre class="line-numbers language-java"><code class="language-java">监听到事件：ApplicationStartingEvent监听到事件：ApplicationEnvironmentPreparedEvent  <span class="token punctuation">.</span>   ____          _            __ _ _ <span class="token operator">/</span>\\ <span class="token operator">/</span> ___<span class="token string">'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '</span>_ <span class="token operator">|</span> <span class="token string">'_| | '</span>_ \<span class="token operator">/</span> _` <span class="token operator">|</span> \ \ \ \ \\<span class="token operator">/</span>  ___<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>  '  <span class="token operator">|</span>____<span class="token operator">|</span> <span class="token punctuation">.</span>__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_\__<span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>_<span class="token operator">|=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">|</span>___<span class="token operator">/=</span><span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">:</span><span class="token operator">:</span> Spring Boot <span class="token operator">:</span><span class="token operator">:</span>        <span class="token punctuation">(</span>v2<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">)</span>监听到事件：ApplicationContextInitializedEvent<span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">36.594</span>  INFO <span class="token number">10220</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>h<span class="token punctuation">.</span>s<span class="token punctuation">.</span>SpringBootEventDemo                <span class="token operator">:</span> Starting SpringBootEventDemo on huaxu with PID <span class="token function">10220</span> <span class="token punctuation">(</span>D<span class="token operator">:</span>\Javavip\microservice<span class="token operator">-</span>project\spring<span class="token operator">-</span>application\target\classes started by <span class="token number">40553</span> in D<span class="token operator">:</span>\Javavip\microservice<span class="token operator">-</span>project<span class="token punctuation">)</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">36.597</span>  INFO <span class="token number">10220</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>h<span class="token punctuation">.</span>s<span class="token punctuation">.</span>SpringBootEventDemo                <span class="token operator">:</span> No active profile set<span class="token punctuation">,</span> falling back to <span class="token keyword">default</span> profiles<span class="token operator">:</span> <span class="token keyword">default</span>监听到事件：ApplicationPreparedEvent<span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">36.731</span>  WARN <span class="token number">10220</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> ConfigServletWebServerApplicationContext <span class="token operator">:</span> Exception encountered during context initialization <span class="token operator">-</span> cancelling refresh attempt<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextException<span class="token operator">:</span> Unable to start web server<span class="token punctuation">;</span> nested exception is org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextException<span class="token operator">:</span> Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean<span class="token punctuation">.</span>监听到事件：ApplicationFailedEvent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>ApplicationStartingEvent（1）</li><li>ApplicationEnvironmentPreparedEvent（2）</li><li>ApplicationPreparedEvent（3）</li><li>ContextRefreshedEvent</li><li>ServletWebServerInitializedEvent</li><li>ApplicationStartedEvent（4）</li><li>ApplicationReadyEvent（5）</li><li>ContextClosedEvent</li><li>ApplicationFailedEvent (特殊情况)（6）</li></ol><p>Spring Boot 事件监听器</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.context.ApplicationListener</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.boot.ClearCachesApplicationListener,\org.springframework.boot.builder.ParentContextCloserApplicationListener,\org.springframework.boot.context.FileEncodingApplicationListener,\org.springframework.boot.context.config.AnsiOutputApplicationListener,\org.springframework.boot.context.config.ConfigFileApplicationListener,\org.springframework.boot.context.config.DelegatingApplicationListener,\org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\org.springframework.boot.context.logging.LoggingApplicationListener,\org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ConfigFileApplicationListener</code> 监听 <code>ApplicationEnvironmentPreparedEvent</code> 事件</p><p>从而加载 <code>application.properties</code> 或者 <code>application.yml</code> 文件</p><p>Spring Boot 很多组件依赖于 Spring Boot 事件监听器实现，本质是 Spring Framework 事件/监听机制</p><p><code>SpringApplication</code> 利用</p><ul><li>Spring 应用上下文（<code>ApplicationContext）</code>生命周期控制 注解驱动 Bean </li><li>Spring 事件/监听（<code>ApplicationEventMulticaster</code>）机制加载或者初始化组件</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleApplicationEventMulticaster</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractApplicationEventMulticaster</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> Executor taskExecutor<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> springCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
